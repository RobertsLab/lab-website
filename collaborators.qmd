---
title: "Collaborators"
title-block-banner: true
toc: true
---

# Research Collaborators

Our lab has had the privilege of working with numerous collaborators across various research projects. This page provides an overview of our external research partnerships and visualization of collaboration networks.

## Collaboration Network

The network below shows collaboration patterns based on co-authorship in our publications:

<div id="collaboration-network"></div>

## Lab Member Network

This visualization shows the relationships between current and former lab members:

<div id="lab-network"></div>

## Active External Collaborators

Based on recent publications and ongoing projects, our primary external collaborators include:

<div id="collaborator-list">
<p><em>Loading collaborator data...</em></p>
</div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
// Load publication data from the generated JSON file
async function loadPublicationData() {
    try {
        const response = await fetch('./collaborations-data.json');
        const data = await response.json();
        return data.publications || [];
    } catch (error) {
        console.error('Error loading collaboration data:', error);
        // Fallback sample data
        return [
            {
                title: "Invertebrate methylomes provide insight into mechanisms of environmental tolerance",
                authors: ["Shelly A. Wanamaker", "Yaamini R. Venkataraman", "Mackenzie R. Gavery", "Steven B. Roberts", "Debashish Bhattacharya", "Alan Downey-Wall", "Jose M. Eirin-Lopez", "Kevin M. Johnson", "Katie E. Lotterhos", "Jonathan B. Puritz", "Hollie M. Putnam"],
                year: 2021
            }
        ];
    }
}

// Function to extract external collaborators
function getExternalCollaborators(publications, labMembers) {
    const collaborators = new Set();
    const collaborationCounts = {};
    
    publications.forEach(pub => {
        pub.authors.forEach(author => {
            // Normalize author name for comparison
            const normalizedAuthor = author.replace(/[.,]/g, '').toLowerCase();
            const isLabMember = labMembers.some(labMember => 
                labMember.replace(/[.,]/g, '').toLowerCase() === normalizedAuthor
            );
            
            if (!isLabMember) {
                collaborators.add(author);
                collaborationCounts[author] = (collaborationCounts[author] || 0) + 1;
            }
        });
    });
    
    return { collaborators: Array.from(collaborators), counts: collaborationCounts };
}

// Function to create collaboration network
function createCollaborationNetwork(publications, containerId) {
    const width = 800;
    const height = 600;
    
    // Create SVG
    const svg = d3.select(`#${containerId}`)
        .append("svg")
        .attr("width", width)
        .attr("height", height);
    
    // Build network data
    const nodes = new Set();
    const links = [];
    
    publications.forEach(pub => {
        pub.authors.forEach(author => nodes.add(author));
        
        // Create links between co-authors
        for (let i = 0; i < pub.authors.length; i++) {
            for (let j = i + 1; j < pub.authors.length; j++) {
                links.push({
                    source: pub.authors[i],
                    target: pub.authors[j],
                    publication: pub.title
                });
            }
        }
    });
    
    const nodeArray = Array.from(nodes).map(name => ({ name }));
    
    // Create force simulation
    const simulation = d3.forceSimulation(nodeArray)
        .force("link", d3.forceLink(links).id(d => d.name).distance(100))
        .force("charge", d3.forceManyBody().strength(-300))
        .force("center", d3.forceCenter(width / 2, height / 2));
    
    // Add links
    const link = svg.append("g")
        .selectAll("line")
        .data(links)
        .enter().append("line")
        .attr("stroke", "#999")
        .attr("stroke-opacity", 0.6)
        .attr("stroke-width", 1);
    
    // Add nodes
    const node = svg.append("g")
        .selectAll("circle")
        .data(nodeArray)
        .enter().append("circle")
        .attr("r", 8)
        .attr("fill", "#69b3a2")
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));
    
    // Add labels
    const label = svg.append("g")
        .selectAll("text")
        .data(nodeArray)
        .enter().append("text")
        .text(d => d.name.split(" ").slice(-1)[0]) // Show last name only
        .attr("font-size", "10px")
        .attr("dx", 12)
        .attr("dy", 4);
    
    // Add tooltip
    node.append("title")
        .text(d => d.name);
    
    simulation.on("tick", () => {
        link
            .attr("x1", d => d.source.x)
            .attr("y1", d => d.source.y)
            .attr("x2", d => d.target.x)
            .attr("y2", d => d.target.y);
        
        node
            .attr("cx", d => d.x)
            .attr("cy", d => d.y);
        
        label
            .attr("x", d => d.x)
            .attr("y", d => d.y);
    });
    
    function dragstarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }
    
    function dragged(event, d) {
        d.fx = event.x;
        d.fy = event.y;
    }
    
    function dragended(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }
}

// Function to create lab member tree
function createLabNetwork(containerId) {
    const width = 800;
    const height = 600;
    
    // Lab member hierarchy data
    const labHierarchy = {
        name: "Steven Roberts",
        type: "PI",
        children: [
            {
                name: "Current Graduate Students",
                type: "group",
                children: [
                    { name: "Zach Bengtsson", type: "grad", status: "current" },
                    { name: "Chris Mantegna", type: "grad", status: "current" },
                    { name: "Celeste Valdivia", type: "grad", status: "current" },
                    { name: "Grace Crandall", type: "grad", status: "current" }
                ]
            },
            {
                name: "Alumni",
                type: "group",
                children: [
                    { name: "Hollie Putnam", type: "postdoc", status: "alumni", current: "University of Rhode Island" },
                    { name: "Matt George", type: "postdoc", status: "alumni" },
                    { name: "Shelly Wanamaker", type: "postdoc", status: "alumni" },
                    { name: "Mackenzie Gavery", type: "grad", status: "alumni", current: "NOAA Fisheries" },
                    { name: "Emma Timmins-Schiffman", type: "grad", status: "alumni" },
                    { name: "Yaamini Venkataraman", type: "grad", status: "alumni" },
                    { name: "Laura Spencer", type: "grad", status: "alumni" },
                    { name: "Aspen Coyle", type: "grad", status: "alumni" },
                    { name: "Jay Dimond", type: "grad", status: "alumni" }
                ]
            }
        ]
    };
    
    const svg = d3.select(`#${containerId}`)
        .append("svg")
        .attr("width", width)
        .attr("height", height);
    
    const tree = d3.tree().size([height - 100, width - 200]);
    const root = d3.hierarchy(labHierarchy);
    tree(root);
    
    // Add links
    svg.selectAll(".link")
        .data(root.links())
        .enter().append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
            .x(d => d.y + 100)
            .y(d => d.x + 50))
        .attr("fill", "none")
        .attr("stroke", "#ccc")
        .attr("stroke-width", 2);
    
    // Add nodes
    const node = svg.selectAll(".node")
        .data(root.descendants())
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y + 100},${d.x + 50})`);
    
    node.append("circle")
        .attr("r", d => d.data.type === "PI" ? 10 : d.data.type === "group" ? 6 : 5)
        .attr("fill", d => {
            switch(d.data.type) {
                case "PI": return "#1f77b4";
                case "group": return "#ff7f0e";
                case "grad": return d.data.status === "current" ? "#2ca02c" : "#d62728";
                case "postdoc": return "#9467bd";
                default: return "#8c564b";
            }
        });
    
    node.append("text")
        .attr("dy", 3)
        .attr("x", d => d.children ? -12 : 12)
        .style("text-anchor", d => d.children ? "end" : "start")
        .text(d => d.data.name)
        .attr("font-size", "10px");
}

// Function to display collaborator list
function displayCollaborators(collaborators, counts) {
    const sorted = collaborators.sort((a, b) => (counts[b] || 0) - (counts[a] || 0));
    
    const listHTML = sorted.map(collab => {
        const count = counts[collab] || 0;
        return `<div class="collaborator-item">
            <strong>${collab}</strong> 
            <span class="collaboration-count">(${count} publication${count > 1 ? 's' : ''})</span>
        </div>`;
    }).join('');
    
    document.getElementById('collaborator-list').innerHTML = listHTML;
}

// Initialize visualizations
async function init() {
    try {
        // Load the actual collaboration data
        const response = await fetch('./collaborations-data.json');
        const collaborationData = await response.json();
        
        const publications = collaborationData.publications || [];
        const externalCollaborators = collaborationData.externalCollaborators || [];
        
        const labMembers = [
            "Steven Roberts", "Steven B. Roberts", "Mackenzie Gavery", "Shelly Wanamaker",
            "Emma Timmins-Schiffman", "Yaamini Venkataraman", "Laura Spencer", 
            "Grace Crandall", "Matt George", "Matthew N. George", "Zach Bengtsson",
            "Chris Mantegna", "Celeste Valdivia", "Hollie Putnam", "Brent Vadopalas",
            "Sam White", "Samuel J. White", "Jay Dimond", "James L. Dimond",
            "Aspen Coyle", "Olivia Cattau"
        ];
        
        if (publications.length > 0) {
            createCollaborationNetwork(publications, "collaboration-network");
        } else {
            document.getElementById('collaboration-network').innerHTML = '<p>No publication data available for network visualization.</p>';
        }
        
        createLabNetwork("lab-network");
        
        if (externalCollaborators.length > 0) {
            displayExternalCollaborators(externalCollaborators);
        } else {
            const { collaborators, counts } = getExternalCollaborators(publications, labMembers);
            displayCollaborators(collaborators, counts);
        }
        
    } catch (error) {
        console.error('Error loading collaboration data:', error);
        // Fallback to original implementation
        const publications = await loadPublicationData();
        const labMembers = [
            "Steven Roberts", "Steven B. Roberts", "Mackenzie Gavery", "Shelly Wanamaker",
            "Emma Timmins-Schiffman", "Yaamini Venkataraman", "Laura Spencer", 
            "Grace Crandall", "Matt George", "Matthew N. George", "Zach Bengtsson",
            "Chris Mantegna", "Celeste Valdivia", "Hollie Putnam", "Brent Vadopalas",
            "Sam White", "Samuel J. White", "Jay Dimond", "James L. Dimond",
            "Aspen Coyle", "Olivia Cattau"
        ];
        
        const { collaborators, counts } = getExternalCollaborators(publications, labMembers);
        
        createCollaborationNetwork(publications, "collaboration-network");
        createLabNetwork("lab-network");
        displayCollaborators(collaborators, counts);
    }
}

// Function to display external collaborators from the extracted data
function displayExternalCollaborators(externalCollaborators) {
    const listHTML = externalCollaborators.slice(0, 50).map(collab => {
        return `<div class="collaborator-item">
            <strong>${collab.name}</strong> 
            <span class="collaboration-count">(${collab.count} publication${collab.count > 1 ? 's' : ''})</span>
        </div>`;
    }).join('');
    
    document.getElementById('collaborator-list').innerHTML = listHTML;
}

// Add CSS styles
const styles = `
<style>
.collaborator-item {
    margin: 8px 0;
    padding: 8px;
    border-left: 3px solid #69b3a2;
    background-color: #f8f9fa;
}

.collaboration-count {
    color: #666;
    font-size: 0.9em;
}

#collaboration-network, #lab-network {
    border: 1px solid #ddd;
    margin: 20px 0;
    background-color: #fafafa;
}

.network-title {
    text-align: center;
    margin: 10px 0;
    font-weight: bold;
}
</style>
`;

document.head.insertAdjacentHTML('beforeend', styles);

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', init);
</script>

## About the Visualizations

The collaboration network shows connections between authors based on co-authorship in publications. Each node represents an author, and lines connect authors who have published together.

The lab member network displays the hierarchical structure of current and former lab members, showing the progression from graduate students to postdocs to their current positions.

## Recent Collaborations

Our recent work has involved partnerships with researchers from institutions including:

- University of Rhode Island (Hollie Putnam)
- NOAA Northwest Fisheries Science Center (Mackenzie Gavery)
- Universidad de Concepción, Chile (Cristian Gallardo-Escárate)
- Northeastern University (Katie Lotterhos)
- University of Miami (Jose Eirin-Lopez)
- URI (Jonathan Puritz)
- And many others across various marine science institutions

*Note: This page automatically extracts collaborator information from our publication metadata. For questions about specific collaborations or to suggest additions, please [contact us](contact.qmd).*